AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for lazy-home

Globals:
  Function:
    Timeout: 10
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Layers:
      - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p38-pycryptodome:2
      - !Ref LazyHomeLayer
    Environment:
      Variables:
        CHANNEL_ACCESS_TOKEN: !Ref ChannelAccessToken
        ADMIN_LINE_USER_ID: !Ref AdminLineUserId
        SWITCH_BOT_OPEN_TOKEN: !Ref SwitchBotOpenToken
        SWITCH_BOT_CLIENT_SECRET: !Ref SwitchBotClientSecret
        SESAME_API_KEY: !Ref SesameApiKey
        SESAME_DEVICE_UUID: !Ref SesameDeviceUuid
        SESAME_DEVICE_SECRET: !Ref SesameDeviceSecret
    Tags:
      Project: lazy-home

Parameters:
  ChannelAccessToken:
    Type: String
    Description: line bot channel access token
  AdminLineUserId:
    Type: String
    Description: notification destination line user id
  SwitchBotOpenToken:
    Type: String
  SwitchBotClientSecret:
    Type: String
  TwitterConsumerSecret:
    Type: String
    Description: twitter consumer secret
  SesameApiKey:
    Type: String
  SesameDeviceUuid:
    Type: String
  SesameDeviceSecret:
    Type: String

Resources:
  LazyHomeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  IftttDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/ifttt/
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/ifttt
            Method: post
      FunctionName: IftttDispatcher
      Role: !GetAtt LambdaFunctionRole.Arn

  IftttDispatcherLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - IftttDispatcher
    Properties:
      LogGroupName: !Sub /aws/lambda/${IftttDispatcher}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  LineDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/line/
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/line
            Method: post
      FunctionName: LineDispatcher

  LineDispatcherLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - LineDispatcher
    Properties:
      LogGroupName: !Sub /aws/lambda/${LineDispatcher}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home
  SwitchBotDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/switch_bot/
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/switch_bot
            Method: post
      FunctionName: SwitchBotDispatcher
      Role: !GetAtt LambdaFunctionRole.Arn

  SwitchBotDispatcherLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - SwitchBotDispatcher
    Properties:
      LogGroupName: !Sub /aws/lambda/${SwitchBotDispatcher}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  TwitterDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/twitter/
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/twitter
            Method: post
      Environment:
        Variables:
          OPEN_CURTAINS_STATE_MACHINE_ARN: !Ref OpenCurtainsStateMachine
      FunctionName: TwitterDispatcher
      Role: !GetAtt LambdaFunctionRole.Arn

  TwitterDispatcherLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - TwitterDispatcher
    Properties:
      LogGroupName: !Sub /aws/lambda/${TwitterDispatcher}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  TwitterChallengeResponseCheck:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/twitter/crc
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/twitter
            Method: get
      Environment:
        Variables:
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
      FunctionName: TwitterChallengeResponseCheck

  TwitterChallengeResponseCheckLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - TwitterChallengeResponseCheck
    Properties:
      LogGroupName: !Sub /aws/lambda/${TwitterChallengeResponseCheck}
      RetentionInDays: 1
      Tags:
        - Key: Project
          Value: lazy-home

  LockSesameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/routine/auto_lock/lock_sesame/
      FunctionName: LockSesame
      Role: !GetAtt LambdaFunctionRole.Arn

  LockSesameFuncLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - LockSesameFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${LockSesameFunction}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  UnlockSesameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/routine/auto_lock/unlock_sesame/
      FunctionName: UnlockSesame
      Role: !GetAtt LambdaFunctionRole.Arn

  UnlockSesameFuncLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - UnlockSesameFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${UnlockSesameFunction}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  NotifyDoorOpeningFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/routine/auto_lock/notify_door_opening/
      FunctionName: NotifyDoorOpeningFunction
      Role: !GetAtt LambdaFunctionRole.Arn

  NotifyDoorOpeningLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - NotifyDoorOpeningFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${NotifyDoorOpeningFunction}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  OpenCurtainsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/routine/morning/open_curtains/
      FunctionName: OpenCurtains
      Role: !GetAtt LambdaFunctionRole.Arn

  OpenCurtainsFuncLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - OpenCurtainsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${OpenCurtainsFunction}
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AWSIoTEventsFullAccess
      Tags:
        - Key: Project
          Value: lazy-home

  OpenCurtainsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: OpenCurtainsStateMachine
      Type: STANDARD
      DefinitionUri: statemachine/open_curtains.asl.yaml
      DefinitionSubstitutions:
        OpenCurtainsFunctionArn: !GetAtt OpenCurtainsFunction.Arn
      Role: !GetAtt StateMachineRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt OpenCurtainsStateMachineLogGroup.Arn
      Tags:
        Project: lazy-home

  OpenCurtainsStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName : /aws/states/OpenCurtainsStateMachine
      RetentionInDays: 3
      Tags:
        - Key: Project
          Value: lazy-home

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: >-
        Permissions required to execute step functions
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Tags:
        - Key: Project
          Value: lazy-home

  FrontDoorDetector:
    Type: AWS::IoTEvents::DetectorModel
    Properties:
      DetectorModelDefinition:
        InitialStateName: closed
        States:
          - StateName: unlocked
            OnInput:
              Events: []
              TransitionEvents:
                - EventName: the_door_was_opened
                  Condition: $input.front_door_input.door.event == 'open'
                  Actions: []
                  NextState: opened
                - EventName: left_unlock
                  Condition: timeout("left_unlock_timer")
                  Actions: []
                  NextState: closed
            OnEnter:
              Events:
                - EventName: unlock
                  Condition: 'true'
                  Actions:
                    - Lambda:
                        FunctionArn: !GetAtt UnlockSesameFunction.Arn
                - EventName: set_left_unlock_timer
                  Condition: 'true'
                  Actions:
                    - SetTimer:
                        TimerName: left_unlock_timer
                        Seconds: 60
            OnExit:
              Events:
                - EventName: delete_left_unlock_timer
                  Condition: 'true'
                  Actions:
                    - ClearTimer:
                        TimerName: left_unlock_timer
          - StateName: opened
            OnInput:
              Events:
                - EventName: notify_alert
                  Condition: timeout("left_open_timer")
                  Actions:
                    - Lambda:
                        FunctionArn: !GetAtt NotifyDoorOpeningFunction.Arn
              TransitionEvents:
                - EventName: the_door_was_closed
                  Condition: $input.front_door_input.door.event == 'close'
                  Actions: []
                  NextState: closed
            OnEnter:
              Events:
                - EventName: set_left_open_timer
                  Condition: 'true'
                  Actions:
                    - SetTimer:
                        TimerName: left_open_timer
                        Seconds: 60
            OnExit:
              Events:
                - EventName: delete_left_open_timer
                  Condition: 'true'
                  Actions:
                    - ClearTimer:
                        TimerName: left_open_timer
          - StateName: closed
            OnInput:
              Events: []
              TransitionEvents:
                - EventName: the_door_was_opened
                  Condition: $input.front_door_input.door.event == 'open'
                  Actions: []
                  NextState: opened
                - EventName: unlocked_remotely
                  Condition: $input.front_door_input.key.event == 'unlock'
                  Actions: []
                  NextState: unlocked
            OnEnter:
              Events:
                - EventName: lock_automatically
                  Condition: 'true'
                  Actions:
                    - Lambda:
                        FunctionArn: !GetAtt LockSesameFunction.Arn
            OnExit:
              Events: []
      DetectorModelName: front_door
      EvaluationMethod: BATCH
      RoleArn: !GetAtt IotEventsRole.Arn
      Tags:
        - Key: Project
          Value: lazy-home

  FrontDoorInput:
    Type: AWS::IoTEvents::Input
    Properties:
      InputDefinition:
        Attributes:
          - JsonPath: door.event
          - JsonPath: key.event
      InputDescription: Inputs used to manage the condition of the entrance
      InputName: front_door_input
      Tags:
        - Key: Project
          Value: lazy-home

  IotEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iotevents.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: IotEvents
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iotevents:BatchPutMessage
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
      Tags:
        - Key: Project
          Value: lazy-home