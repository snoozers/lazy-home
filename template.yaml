AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for lazy-home

Globals:
  Function:
    Timeout: 10
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Layers:
      - !Ref LazyHomeLayer
    Environment:
      Variables:
        CHANNEL_ACCESS_TOKEN: !Ref ChannelAccessToken
        ADMIN_LINE_USER_ID: !Ref AdminLineUserId
        SWITCH_BOT_OPEN_TOKEN: !Ref SwitchBotOpenToken
    Tags:
      Project: lazy-home

Parameters:
  ChannelAccessToken:
    Type: String
    Description: line bot channel access token
  AdminLineUserId:
    Type: String
    Description: notification destination line user id
  SwitchBotOpenToken:
    Type: String
  TwitterConsumerSecret:
    Type: String
    Description: twitter consumer secret
  OpenCurtainsStateMachineArn:
    Type: String

Resources:
  LazyHomeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  IftttDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/ifttt/
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/ifttt
            Method: post
      FunctionName: IftttDispatcher

  IftttDispatcherLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - IftttDispatcher
    Properties:
      LogGroupName: !Sub /aws/lambda/${IftttDispatcher}
      RetentionInDays: 7
      Tags:
        - Key: Project
          Value: lazy-home

  LineDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/line/
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/line
            Method: post
      FunctionName: LineDispatcher

  LineDispatcherLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - LineDispatcher
    Properties:
      LogGroupName: !Sub /aws/lambda/${LineDispatcher}
      RetentionInDays: 7
      Tags:
        - Key: Project
          Value: lazy-home

  TwitterDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/twitter/
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/twitter
            Method: post
      Environment:
        Variables:
          OPEN_CURTAINS_STATE_MACHINE_ARN: !Ref OpenCurtainsStateMachineArn
      FunctionName: TwitterDispatcher
      Role: !GetAtt LambdaFunctionRole.Arn

  TwitterDispatcherLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - TwitterDispatcher
    Properties:
      LogGroupName: !Sub /aws/lambda/${TwitterDispatcher}
      RetentionInDays: 7
      Tags:
        - Key: Project
          Value: lazy-home

  TwitterChallengeResponseCheck:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dispatcher/twitter/crc
      Events:
        Controller:
          Type: Api
          Properties:
            Path: /dispatcher/twitter
            Method: get
      Environment:
        Variables:
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
      FunctionName: TwitterChallengeResponseCheck

  TwitterChallengeResponseCheckLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - TwitterChallengeResponseCheck
    Properties:
      LogGroupName: !Sub /aws/lambda/${TwitterChallengeResponseCheck}
      RetentionInDays: 1
      Tags:
        - Key: Project
          Value: lazy-home

  OpenCurtainsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/routine/morning/open_curtains/
      FunctionName: OpenCurtains
      Role: !GetAtt LambdaFunctionRole.Arn

  OpenCurtainsFuncLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - OpenCurtainsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${OpenCurtainsFunction}
      RetentionInDays: 7
      Tags:
        - Key: Project
          Value: lazy-home

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Tags:
        - Key: Project
          Value: lazy-home

  OpenCurtainsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: OpenCurtainsStateMachine
      Type: STANDARD
      DefinitionUri: statemachine/open_curtains.asl.yaml
      DefinitionSubstitutions:
        OpenCurtainsFunctionArn: !GetAtt OpenCurtainsFunction.Arn
      Role: !GetAtt StateMachineRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt OpenCurtainsStateMachineLogGroup.Arn
      Tags:
        Project: lazy-home

  OpenCurtainsStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName : /aws/states/OpenCurtainsStateMachine
      RetentionInDays: 7
      Tags:
        - Key: Project
          Value: lazy-home

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: >-
        Permissions required to execute step functions
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Tags:
        - Key: Project
          Value: lazy-home